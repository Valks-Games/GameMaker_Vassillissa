<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0
image_index = 0
direction = 0
image_angle = 0
speed = 0

chance = irandom(1);
randommove = random(0.4);

//info
name = 'Sythe'
class = 'Fighter'
desc = 'Fast combat ship used to evade and pack a small punch.'
tier = 1

ship = obj_ship_fighter_1

//store
cost = 1000
hpupgradecost = -1
hpregenupgradecost = -1
armorupgradecost = -1
armorregenupgradecost = -1
shieldupgradecost = -1
shieldregenupgradecost = -1

//health
maxhp = 100
hp = maxhp
hpregen = 1
maxarmor = 100
armor = maxarmor
armorregen = 1
maxshield = 100
shield = maxshield
shieldregen = 2
hpregendelay = 60
armorregendelay = 60
shieldregendelay = 60



hpregencounter = 0
armorregencounter = 0
shieldregencounter = 0

//msc
cloaking = false
playercontrolled = false
outofship = false
team = 1
selected = false;
movetarget = -1;
state = 'idle'
findrange = 1000
shootdelay = 10
sizewidth = sprite_get_width(sprite_index)
sizeheight = sprite_get_height(sprite_index)

clipsize = 5
clipreloaddelay = -50
turretrotspd = 5
scanwidth = 2
bullettype = 'normal'
bulletlife = 80
bulletspeed = 20

shipid = id;

radarpulse = false;
radar_radius = 0;
radarfound = 0;

viewrange = 0.8;

colliding = false;

//slots
turretslots = 0
engineslots = 0
hullslots = 0
infantryslots = 0
cargoslots = 0
shipslots = 0

//move
maxmovespeed = 10
moveacc = 0.2
movefriction = 0.05
maxturnspeed = 2
turn = 0
turnacc = 0.6
turnfriction = 0.05
turningleft = false
fuel = 10;
maxfuel = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Accerlation and Update Turrets
speed = max(speed - movefriction,0)
if (speed &lt; 0) speed = 0
if (speed &gt; maxmovespeed) speed = maxmovespeed

turn = max(turn - turnfriction, 0)
if (turn &lt; -maxturnspeed) turn = -maxturnspeed
if (turn &gt; maxturnspeed) turn = maxturnspeed

fuel -= speed / 10000;

/*if (playercontrolled){
  view_angle[view_current] = (direction * -1) + 90;
}*/

displayhp = (hp / maxhp) * 100;
displayarmor = (armor / maxarmor) * 100;
displayshield = (shield / maxshield) * 100;
displayfuel = (fuel / maxfuel) * 100;
displayspeed = (speed / maxmovespeed) * 100;

scr_update_turrets(turretslots, speed, direction, x, y)
scr_update_engines(engineslots, speed, direction, x, y)

if (playercontrolled){
  global.playershipid = id;
} else {
  if (instance_exists(global.playershipid)){
    scr_radar(x, y, global.playershipid.x, global.playershipid.y, global.playershipid.radar_radius)
  }
}

/*motion_add(point_direction(other.x,other.y,x,y),1)

if (x == other.x &amp;&amp; y == other.y){
  if (id &gt; other.id){
    x+=1;
  } else {
    x-=1;
  }
}*/

/*if (global.graphics &gt;= 1){
  if (place_meeting(x, y, par_ship)){
    colliding = true;
    if (chance){
      direction += turnacc;
      image_angle += turnacc;
      motion_add(direction,0.1 + randommove)
    } else {
      direction -= turnacc;
      image_angle -= turnacc;
      motion_add(direction,0.1 + randommove + 0.1)
    }
    colliding = false;
  }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Logic
if (global.pause) exit;

if (keyboard_check_pressed(ord("R")) &amp;&amp; !global.outofship &amp;&amp; instance_exists(global.playershipid)){
  global.playershipid.radarpulse = false;
  global.playershipid.radar_radius = 0;
  global.outofship = true;
  global.playershipid.playercontrolled = false;
  trooper = instance_create(global.playershipid.x,global.playershipid.y,obj_infantry_recruit)
  view_object[view_current] = trooper;
}

if (playercontrolled &amp;&amp; !global.outofship) {
  scr_controls_playership();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health Control
target = instance_nearest(x,y,par_proj);
if (place_meeting(x,y,target) &amp;&amp; target.team != team){
  with(target){
    instance_destroy();
  }
  if (shield &gt; 0){
    shield--
  } else {
    shield = 0;
    if (armor &gt; 0){
      armor--
    } else {
    armor = 0;
      if (hp &gt; 0){
        hp--
      } else {
        effect_create_above(ef_smoke,x,y,2.0,c_black);
        if (playercontrolled){
          trooper = instance_create(x,y,obj_infantry_recruit);
          view_object[view_current] = trooper;
        }
        instance_destroy();
        var s;
        for (s = 0; s &lt; turretslots; s += 1){
          with(turret[s,0]){
            instance_destroy();
          }
        }
        with(movetarget){
          instance_destroy();
        }
      }
    }
  }
}


//Handle Regeneration
if (shield &lt; maxshield){
  if (shield &lt;= 0){
    
  } else {
    shieldregencounter += 1;
    if (shieldregencounter &gt; shieldregendelay){
      shieldregencounter = 0;
      shield += shieldregen;
    }
  }
}
if (armor &lt; maxarmor){
  if (armor &lt;= 0){
  
  } else {
    armorregencounter += 1;
    if (armorregencounter &gt; armorregendelay){
      armorregencounter = 0;
      armor += armorregen;
    }
  }
}
if (hp &lt; maxhp){
  if (hp &lt;= 0){
  
  } else {
    hpregencounter += 1;
    if (hpregencounter &gt; hpregendelay){
      hpregencounter = 0;
      hp += hpregen;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World Border

if (!point_in_rectangle(x+speed,y+speed,0,0,room_width,room_height)){
  x = 300;
  y = 300;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI Logic
if (playercontrolled) return 0;

scr_ship_alert();

if (state == 'move' &amp;&amp; !colliding) {
  scr_ship_move(0.1, 4);
} else if (state == 'idle'){
  scr_ship_idle();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select the ship

if (instance_exists(obj_mouse)){
  scr_select(obj_mouse.px, obj_mouse.py, mouse_x, mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create target and change to a move state

//make sure there isnt already a target in room
if (movetarget != -1 &amp;&amp; instance_exists(movetarget)){
  with(movetarget) instance_destroy();
}

movetarget = instance_create(mouse_x,mouse_y,obj_movetarget)

if (selected){
  state = 'move';
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playercontrolled){
  var voffset = 650;
  draw_set_alpha(0.8)
  draw_set_colour(c_black)
  draw_rectangle(0,700,1366,768,false)
  draw_set_alpha(0.3)
  draw_healthbar(50,voffset + 70, 400, voffset + 80,displayhp,c_black,c_red,c_lime,0,true,true)
  draw_healthbar(50,voffset + 80 + 1, 400, voffset + 90 + 1,displayarmor,c_black,c_black,c_orange,0,true,true)
  draw_healthbar(50,voffset + 90 + 2, 400, voffset + 100 + 2,displayshield,c_black,c_black,c_aqua,0,true,true)
  draw_healthbar(900,voffset + 70, 1250, voffset + 80,displayspeed,c_black,c_red,c_purple,0,true,true)
  draw_healthbar(900,voffset + 80 + 1, 1250, voffset + 90 + 1,displayfuel,c_black,c_red,c_fuchsia,0,true,true)
  draw_set_alpha(1)
  draw_set_font(fnt_supertiny)
  draw_set_colour(c_white)
  draw_set_valign(fa_middle)
  draw_set_halign(fa_center)
  draw_text(225,voffset + 75,"Health: " + string(hp) + "/" + string(maxhp))
  draw_text(225,voffset + 85,"Armor: " + string(armor) + "/" + string(maxarmor))
  draw_text(225,voffset + 95,"Shield: " + string(shield) + "/" + string(maxshield))
  draw_text(1075,voffset + 75,"Speed: " + string(speed) + "/" + string(maxmovespeed))
  draw_text(1075,voffset + 85,"Fuel: " + string(fuel) + "/" + string(maxfuel))
  draw_sprite_stretched(sprite_index,1,425,voffset + 60,40,40)
  draw_set_valign(fa_middle)
  draw_set_halign(fa_left)
  draw_text(530,voffset + 70,"Name: " + string(name))
  draw_text(530,voffset + 80,"Class: " + string(class))
  draw_text(530,voffset + 90,"Tier: " + string(tier))
  draw_text(530,voffset + 100,"Desc: " + string(desc))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!playercontrolled){
  draw_set_alpha(0.3)
  draw_healthbar(x-15,y,  x+30,y+3,displayhp,c_black,c_red,c_lime,0,false,false)
  draw_healthbar(x-15,y+4,x+30,y+7,displayarmor,c_black,c_orange,c_orange,0,false,false)
  draw_healthbar(x-15,y+8,x+30,y+11,displayshield,c_black,c_aqua,c_aqua,0,false,false)
  draw_set_alpha(1)
}

if (keyboard_check(vk_f2)){
  draw_set_color(c_white)
  draw_set_font(fnt_small)
  draw_text(x,y,id)
}

if (keyboard_check_pressed(ord("F"))){
  radarpulse = true;
}

if (playercontrolled){
  if (radarpulse){
    draw_set_alpha(0.05)
    draw_set_colour(c_white)
    draw_circle(x,y,radar_radius,true)
    draw_set_alpha(1)
    radar_radius += 10;
    if (radar_radius &gt; 2000){
      radarpulse = false;
      radar_radius = 0;
    }
  }
}

if (radarfound){
  draw_set_alpha(0.5)
  if (global.playershipid.team != team){
    draw_set_colour(c_red)
  } else {
    draw_set_colour(c_aqua)
  }
  draw_line(x,y,global.playershipid.x,global.playershipid.y)
  draw_set_alpha(1)
  draw_set_colour(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!playercontrolled){
  if (selected){
    draw_set_alpha(.25);
    draw_ellipse_colour(x-sizewidth/2,y-sizeheight/2,x+sizewidth/2,y+sizeheight/2,c_lime,c_lime,true);
    draw_set_alpha(.1);
    draw_ellipse_colour(x-sizewidth/2,y-sizeheight/2,x+sizewidth/2,y+sizeheight/2,c_lime,c_lime,false);
    draw_set_alpha(1);
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (instance_exists(global.playershipid)){
  if (global.playershipid.team == team){
    surface_set_target(obj_world_fog.sFog);
    
    draw_set_blend_mode(bm_src_color)
    draw_sprite_ext(spr_light, 0, x / obj_world_fog.res, y / obj_world_fog.res, viewrange, viewrange, 0, 0, 0.04)
    draw_set_blend_mode(bm_normal)
    
    surface_reset_target();
  } else {
    draw_self();
  }
}

if (instance_exists(global.playershipid)){
  if (team != global.playershipid.team){
    surface_set_target(obj_world_fog.sFog);
    
    draw_set_blend_mode(bm_src_color)
    draw_sprite_ext(spr_light, 0, x / obj_world_fog.res, y / obj_world_fog.res, viewrange, viewrange, 0, 0, -0.08)
    draw_set_blend_mode(bm_normal)
    
    surface_reset_target();
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

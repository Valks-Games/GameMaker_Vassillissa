<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship_flagship_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>400</depth>
  <persistent>0</persistent>
  <parentName>par_ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
event_inherited();

name = 'Galactic Core'
class = 'Flagship'
desc = 'The ultimate gunship, used in many scenarios. Good for both long and short ranged combat. Overall no weaknesses only strengths. Used to end galatic wars.'
tier = 9

viewrange = 2.0;

maxmovespeed = 0.8
moveacc =      0.002
movefriction = 0.001
maxturnspeed = 0.1
turnacc =      0.002
turnfriction = 0.001

hp = 10000;
maxhp = 10000;
armor = 5000;
maxarmor = 5000;
shield = 2500;
maxshield = 2500;
hpregen = 0.2;
armorregen = 0.2;
shieldregen = 0.4;

shootdelay = 40;
findrange = 3000;

bulletlife = 60;
bulletspeed = 40;
clipsize = 20;

turretslots = 8;
scr_init_turrets(turretslots, obj_turret_1, team, findrange, shootdelay, clipsize, clipreloaddelay, turretrotspd, scanwidth, bullettype, bulletlife, bulletspeed, id);
var push = 100;
var pushtwo = 150;

turret[0,1] = point_direction(x,y,turret[0,0].x - 90,turret[0,0].y - 60);
turret[0,2] = point_distance(x,y,turret[0,0].x + push,turret[0,0].y + push);

turret[1,1] = point_direction(x,y,turret[1,0].x - 90,turret[1,0].y + 60);
turret[1,2] = point_distance(x,y,turret[1,0].x + push,turret[1,0].y + push);

turret[2,1] = point_direction(x,y,turret[2,0].x + 90,turret[2,0].y - 60);
turret[2,2] = point_distance(x,y,turret[2,0].x + push,turret[2,0].y + push);

turret[3,1] = point_direction(x,y,turret[3,0].x + 90,turret[3,0].y + 60);
turret[3,2] = point_distance(x,y,turret[3,0].x + push,turret[3,0].y + push);

turret[4,1] = point_direction(x,y,turret[0,0].x - 90,turret[0,0].y - 60);
turret[4,2] = point_distance(x,y,turret[0,0].x + pushtwo,turret[0,0].y + pushtwo);

turret[5,1] = point_direction(x,y,turret[1,0].x - 90,turret[1,0].y + 60);
turret[5,2] = point_distance(x,y,turret[1,0].x + pushtwo,turret[1,0].y + pushtwo);

turret[6,1] = point_direction(x,y,turret[2,0].x + 90,turret[2,0].y - 60);
turret[6,2] = point_distance(x,y,turret[2,0].x + pushtwo,turret[2,0].y + pushtwo);

turret[7,1] = point_direction(x,y,turret[3,0].x + 90,turret[3,0].y + 60);
turret[7,2] = point_distance(x,y,turret[3,0].x + pushtwo,turret[3,0].y + pushtwo);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
